#### 迭代器(iterator)
迭代器是一个可以记住遍历位置的对象
迭代器对象从集合的第一个位置访问，直到所有元素被访问完，切只能前进不能后退

    
有两个基本的方法：iter()创建迭代器，next()访问迭代器一次只能取一个
    
    list = [1,2,3,4]
    iterw = iter(list)
    print(next(iterw))
    
常用的 字符串，列表 元组，字典都可用来创建迭代器

可以被常规for语句访问，用while语句时要用next() 函数，但注意当迭代器遍历结束时next()函数会抛出停止迭代的异常，即可结束迭代
    
    list = [1,2,3,4]
    iters = iter(list)
    while True:
        try:
             print(next(iters))
        except StopIteration:
            break
        

#### 创建一个迭代器
除了传统的，用字符串，列表，元组，字典外，还可以自己实现一个迭代器
在上面的字典，列表元组中，他们有一个共同的特点，都实现了__iter__,__next__这两个内置函数
只要实现这两个协议那么我们就可以创建一个自己的迭代对象,我们可以实现一个简单的range()函数，返回指定长度的数列，通过start，end,返回一个定长数列

      class myrange:
        def __init__(self,start,end):
            self.start = start
            self.end = end
            
        def __iter__(self):
            return self
    
        def __next__(self):
            if self.start <= self.end:
                number = self.start
                self.start += 1
                return number
            else:
                raise StopIteration
                

在py3中range()就是用迭代器来实现的，当我们要生成数列的时候，不必要一次性生成全部的数列可以减少空间开销

#### 生成器
一个包含yield 关键字的函数就是一个生成器函数。
生成器的本质就是迭代器
当用了这个关键字时，可以返回值，不同于return ,yield返回值后，该函数会在返回结果后挂起，下次调用时继续执行，
调用生成器函数不会得到返回的具体值，而是得到一个可迭代对象。不会一次性在内存中生成太多数据

        def product():
            for i in range(100):
                yield i
        
        produce = product()
        print(produce.__next__())
        
        print(produce.__next__())
        print(next(produce))
        
        # number = 0
        # for i in produce:
        #     print(i)
        #     number += 1
        #     if number == 5:
        #
        #         break
#### 生成器表达式

    #列表推导式
    list = [i for i in range(10)]
    # 生成器表达式
    list1 = (i for i in range(10))
    print(list)
    # 返回一个数列[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    print(list1)
    print(next(list1))#next本质就是调用__next__
    # 返回以个生成器对象<generator object <genexpr> at 0x000001DDB26C5F48>
    
1. 把列表解析式的[]换成()得到的就是生成器表达式
2. python不但使用迭代器协议，让for循环变得更加通用，大部分内置函数，也是使用迭代协议访问对象。例如sum函数是Python的内置函数，该函数使用迭代器协议访问对象，而生成器实现迭代器协议。
